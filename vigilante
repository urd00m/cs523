#!/usr/bin/env python3

# Code credits: To the inspectre paper. Modifications are planned but currently using a slightly modified version of their work

import argparse
import csv
import subprocess
import os
from pathlib import Path
import shutil
import multiprocessing as mp
from analyzer import reasoner, analyzer
from analyzer.shared.config import *
import tqdm

def run_reasoner(args):
    reasoner.run(args.csv_in, args.csv_out)

def analyzer_job(entrypoint):
    gadget_address = entrypoint[0]
    gadget_name = entrypoint[1]

    logfile = open(f"{args.output}/logs/out_{gadget_name}-{gadget_address}.log", "w")
    gadgetfile = f"{args.output}/gadgets/{gadget_name}-{gadget_address}.csv"
    tfpfile = f"{args.output}/tfps/{gadget_name}-{gadget_address}.csv"

    # Parallize everything 
    cmd = [
        'timeout', '360', 
        'python3', '-m analyzer.analyzer',
        args.binary,
        args.config,
        '0',
        gadget_address,
        gadget_name, 
        '--csv_filename', gadgetfile,
        '--tfp_csv_filename', tfpfile,
        '--asm_folder', f"{args.output}/asm/"
    ]

    res = subprocess.run([' '.join(cmd)], shell=True, stdout=subprocess.PIPE, stderr=logfile, check=False)
    logfile.write(f"Exited with code {res.returncode}")
    logfile.close()

    with open(args.output + "/finished.txt", "a") as f:
        finished = f"addr: {gadget_address}    name: {gadget_name} "
        # print(finished)
        f.write(finished)

def run_analyzer(args):
    # Load config
    analyzer.load_config(args.config)

    # Parse entrypoint list
    file = open(args.address_list, "r")
    entrypoints = list(csv.reader(file, delimiter=","))[1:] # toss out header
    file.close()
    if len(entrypoints[0]) != 2:
        print("Invalid CSV: gadgets should be in the form of <hex_address>,<name")
        exit(-1)
    parsed_entrypoints = [[int(x[0], 16), str(x[1]).strip()] for x in entrypoints]

    # Prepare output folder
    out_folder = args.output
    gadget_folder=out_folder + "/gadgets"
    tfp_folder=out_folder + "/tfps"
    log_folder=out_folder + "/logs"
    asm_folder=out_folder + "/asm"
    outpath = Path(out_folder)
    if outpath.exists() and outpath.is_dir():
        shutil.rmtree(outpath)
    outpath.mkdir(parents=True, exist_ok=True)
    Path(tfp_folder).mkdir(parents=True, exist_ok=True)
    Path(log_folder).mkdir(parents=True, exist_ok=True)
    Path(asm_folder).mkdir(parents=True, exist_ok=True)
    open('fail.txt', 'a').close()

    # Make pool
    pool = mp.Pool(processes=global_config['NumJobs'])
    for _ in tqdm.tqdm(pool.imap_unordered(analyzer_job, entrypoints), total=len(entrypoints)):
        pass
    pool.close()

if __name__ == '__main__':
    arg_parser = argparse.ArgumentParser(description='cs523 project')
    subparsers = arg_parser.add_subparsers(dest='command', help='command to run', required=True)

    # TODO cut down on the number of arguments here, we don't need to support that many 

    # ----------- Analyzer
    analyzer_args = subparsers.add_parser('analyze', help='Extract a list of transmission gadgets from a binary')
    # Required args.
    analyzer_args.add_argument('binary')
    analyzer_args.add_argument('--config', type=str, required=True, help='which configuration file to use')
    analyzer_args.add_argument('--address-list', default='', help='read entrypoints from a file with the format <HEX_ADDRESS>,<NAME> (you can choose any name)')

    # Optional args. (eliminate)
    # analyzer_args.add_argument('--cache-project', action='store_true', help='load the angr project from a pickle named <BINARY>.angr, or create one if it does not exist')

    # Outputs TODO make it so you just need to specify output folder instead of all three folders 
    analyzer_args.add_argument('--output', required=False, default='', help='output all found gadgets to a CSV')

    # Run the analyzer 
    analyzer_args.set_defaults(func=run_analyzer)

    # ----------- Reasoner
    reasoner_args = subparsers.add_parser('reason', help='Reason about gadget exploitability')
    reasoner_args.add_argument('csv_in')
    reasoner_args.add_argument('csv_out')
    reasoner_args.set_defaults(func=run_reasoner)

    args = arg_parser.parse_args()

    args.func(args)
