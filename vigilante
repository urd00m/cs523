#!/usr/bin/env python3

# Code credits: To the inspectre paper. Modifications are planned but currently using a slightly modified version of their work

import argparse
import csv
import subprocess
import os

from  analyzer import analyzer

def run_analyzer(args):

    # Parse entrypoint list
    file = open(args.address_list, "r")
    entrypoints = list(csv.reader(file, delimiter=","))[1:] # toss out header
    file.close()
    if len(entrypoints[0]) != 2:
        print("Invalid CSV: gadgets should be in the form of <hex_address>,<name")
        exit(-1)
    parsed_entrypoints = [[int(x[0], 16), str(x[1]).strip()] for x in entrypoints]

    analyzer.run(binary=args.binary,
                 config_file=args.config,
                 base_address=0x0,
                 gadgets=parsed_entrypoints,
                 cache_project=args.cache_project,
                 csv_filename=args.output,
                 tfp_csv_filename=args.tfp_output,
                 asm_folder=args.asm)

if __name__ == '__main__':
    arg_parser = argparse.ArgumentParser(description='cs523 project')
    subparsers = arg_parser.add_subparsers(dest='command', help='command to run', required=True)

    # TODO cut down on the number of arguments here, we don't need to support that many 

    # ----------- Analyzer
    analyzer_args = subparsers.add_parser('analyze', help='Extract a list of transmission gadgets from a binary')
    # Required args.
    analyzer_args.add_argument('binary')
    analyzer_args.add_argument('--config', type=str, required=True, help='which configuration file to use')
    analyzer_args.add_argument('--address-list', default='', help='read entrypoints from a file with the format <HEX_ADDRESS>,<NAME> (you can choose any name)')

    # Optional args. (eliminate)
    analyzer_args.add_argument('--cache-project', action='store_true', help='load the angr project from a pickle named <BINARY>.angr, or create one if it does not exist')

    # Outputs TODO make it so you just need to specify output folder instead of all three folders 
    analyzer_args.add_argument('--output', required=False, default='', help='output all found gadgets to a CSV')
    analyzer_args.add_argument('--tfp-output', required=False, default='', help='output all found dispatch gadgets to a CSV')
    analyzer_args.add_argument('--asm', required=False, default='', help='output an annotated ASM file for each gadget to the specified folder')

    # Run the analyzer 
    analyzer_args.set_defaults(func=run_analyzer)

    args = arg_parser.parse_args()

    args.func(args)
